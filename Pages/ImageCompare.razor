@page "/imagecompare"
@using Microsoft.ML
@using Microsoft.ML.Data
@using Microsoft.ML.Transforms.Onnx
@inject IWebHostEnvironment Env

<h3>Comparer deux images</h3>

<InputFile OnChange="OnInputFile1" />
<InputFile OnChange="OnInputFile2" />

<div style="display: flex; gap: 20px; align-items: flex-start;">
    <div style="text-align: center;">
        <div><strong>Image 1</strong></div>
        <p>@img1Error</p>
        @if (img1Preview != null)
        {
            <img src="@img1Preview" width="200" style="border: 1px solid #ccc; border-radius: 5px;" />
        }
    </div>

    <div style="text-align: center;">
        <div><strong>Image 2</strong></div>
        <p>@img2Error</p>
        @if (img2Preview != null)
        {
            <img src="@img2Preview" width="200" style="border: 1px solid #ccc; border-radius: 5px;" />
        }
    </div>

    <button @onclick="CompareImages" disabled="@(!CanCompare)">Comparer</button>
</div>



@if (similarity.HasValue)
{
    <p>Similarité : @similarity.Value.ToString("0.00") %</p>
}

@code {
    private IBrowserFile file1, file2;
    private string? img1Preview, img2Preview;
    private string? img1Error, img2Error;
    private float? similarity;

    private bool CanCompare => file1 != null && file2 != null && string.IsNullOrEmpty(img1Error) && string.IsNullOrEmpty(img2Error);

    private async Task OnInputFile1(InputFileChangeEventArgs e)
    {
        try
        {
            img1Error = "";
            file1 = e.File;
            var buffer = new byte[file1.Size];
            using var stream = file1.OpenReadStream(maxAllowedSize: 5_000_000); // 5 Mo max
            await stream.ReadAsync(buffer, 0, (int)file1.Size);
            img1Preview = $"data:{file1.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
        catch (Exception ex)
        {
            img1Error = $"{ex.Message}";
        }
    }

    private async Task OnInputFile2(InputFileChangeEventArgs e)
    {
        try
        {
            img2Error = "";
            file2 = e.File;
            var buffer = new byte[file2.Size];
            using var stream = file2.OpenReadStream(maxAllowedSize: 5_000_000); // 5 Mo max
            await stream.ReadAsync(buffer, 0, (int)file2.Size);
            img2Preview = $"data:{file2.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
        catch (Exception ex)
        {
            img2Error = $"{ex.Message}";
        }
    }

    private void CompareImages()
    {
        var mlContext = new MLContext();

        // Charger le modèle ONNX
        var pipeline = mlContext.Transforms.LoadImages(outputColumnName: "input", imageFolder: "", inputColumnName: nameof(ImageInput.Image))
                        .Append(mlContext.Transforms.ResizeImages("input", 224, 224))
                        .Append(mlContext.Transforms.ExtractPixels("input"))
                        .Append(mlContext.Transforms.ApplyOnnxModel(
                            modelFile: Path.Combine(Env.WebRootPath, "models/mobilenetv2-7.onnx"),
                            outputColumnNames: new[] { "output" },
                            inputColumnNames: new[] { "input" }));

        var model = pipeline.Fit(mlContext.Data.LoadFromEnumerable(new List<ImageInput>()));

        // Convertir les images en float[] via ML.NET
        var engine = mlContext.Model.CreatePredictionEngine<ImageInput, ImageOutput>(model);

        var img1Data = new ImageInput { Image = ReadFileBytes(file1) };
        var img2Data = new ImageInput { Image = ReadFileBytes(file2) };

        var feat1 = engine.Predict(img1Data).Output;
        var feat2 = engine.Predict(img2Data).Output;

        similarity = CosineSimilarity(feat1, feat2) * 100;
    }

    private byte[] ReadFileBytes(IBrowserFile file)
    {
        using var stream = file.OpenReadStream();
        byte[] buffer = new byte[file.Size];
        stream.Read(buffer, 0, buffer.Length);
        return buffer;
    }

    private float CosineSimilarity(float[] a, float[] b)
    {
        float dot = 0;
        float magA = 0;
        float magB = 0;
        for (int i = 0; i < a.Length; i++)
        {
            dot += a[i] * b[i];
            magA += a[i] * a[i];
            magB += b[i] * b[i];
        }
        return dot / ((float)Math.Sqrt(magA) * (float)Math.Sqrt(magB));
    }

    public class ImageInput
    {
        public byte[] Image { get; set; } = null!;
    }

    public class ImageOutput
    {
        [ColumnName("output")]
        public float[] Output { get; set; } = null!;
    }
}
